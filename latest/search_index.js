var documenterSearchIndex = {"docs":
[{"location":"#TOML","page":"TOML1","title":"TOML","text":"","category":"section"},{"location":"","page":"TOML1","title":"TOML1","text":"TOML.jl is a Julia standard library for parsing and writing TOML v1.0 files.","category":"page"},{"location":"#Parsing-TOML-data","page":"TOML1","title":"Parsing TOML data","text":"","category":"section"},{"location":"","page":"TOML1","title":"TOML1","text":"julia> using TOML1\n\njulia> data = \"\"\"\n           [database]\n           server = \"192.168.1.1\"\n           ports = [ 8001, 8001, 8002 ]\n       \"\"\";\n\njulia> TOML1.parse(data)\nOrderedDict{String, Any} with 1 entry:\n  \"database\" => OrderedDict{String, Any}(\"server\"=>\"192.168.1.1\", \"ports\"=>[800â€¦","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"To parse a file, use TOML1.parsefile. If the file has a syntax error, an exception is thrown:","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"julia> using TOML1\n\njulia> TOML1.parse(\"\"\"\n           value = 0.0.0\n       \"\"\")\nERROR: TOML Parser error:\nnone:1:16 error: failed to parse value\n      value = 0.0.0\n                 ^\n[...]","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"There are other versions of the parse functions (TOML1.tryparse and TOML1.tryparsefile) that instead of throwing exceptions on parser error returns a TOML1.ParserError with information:","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"julia> using TOML1\n\njulia> err = TOML1.tryparse(\"\"\"\n           value = 0.0.0\n       \"\"\");\n\njulia> err.type\nErrGenericValueError::ErrorType = 14\n\njulia> err.line\n1\n\njulia> err.column\n16","category":"page"},{"location":"#Exporting-data-to-TOML-file","page":"TOML1","title":"Exporting data to TOML file","text":"","category":"section"},{"location":"","page":"TOML1","title":"TOML1","text":"The TOML1.print function is used to print (or serialize) data into TOML format.","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"julia> using TOML1\n\njulia> data = Dict(\n          \"names\" => [\"Julia\", \"Julio\"],\n          \"age\" => [10, 20],\n       );\n\njulia> TOML1.print(data)\nnames = [\"Julia\", \"Julio\"]\nage = [10, 20]\n\njulia> fname = tempname();\n\njulia> open(fname, \"w\") do io\n           TOML1.print(io, data)\n       end\n\njulia> TOML1.parsefile(fname)\nOrderedDict{String, Any} with 2 entries:\n  \"names\" => [\"Julia\", \"Julio\"]\n  \"age\"   => [10, 20]","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"Keys can be sorted according to some value","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"julia> using TOML1\n\njulia> TOML1.print(Dict(\n       \"abc\"  => 1,\n       \"ab\"   => 2,\n       \"abcd\" => 3,\n       ); sorted=true, by=length)\nab = 2\nabc = 1\nabcd = 3","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"For custom structs, pass a function that converts the struct to a supported type","category":"page"},{"location":"","page":"TOML1","title":"TOML1","text":"julia> using TOML1\n\njulia> struct MyStruct\n           a::Int\n           b::String\n       end\n\njulia> TOML1.print(Dict(\"foo\" => MyStruct(5, \"bar\"))) do x\n           x isa MyStruct && return [x.a, x.b]\n           error(\"unhandled type $(typeof(x))\")\n       end\nfoo = [5, \"bar\"]","category":"page"},{"location":"#References","page":"TOML1","title":"References","text":"","category":"section"},{"location":"#TOML1.parse","page":"TOML1","title":"TOML1.parse","text":"parse(x::Union{AbstractString, IO})\nparse(p::Parser, x::Union{AbstractString, IO})\n\nParse the string  or stream x, and return the resulting table (dictionary). Throw a ParserError upon failure.\n\nSee also TOML1.tryparse.\n\n\n\n\n\n","category":"function"},{"location":"#TOML1.parsefile","page":"TOML1","title":"TOML1.parsefile","text":"parsefile(f::AbstractString)\nparsefile(p::Parser, f::AbstractString)\n\nParse file f and return the resulting table (dictionary). Throw a ParserError upon failure.\n\nSee also TOML1.tryparsefile.\n\n\n\n\n\n","category":"function"},{"location":"#TOML1.tryparse","page":"TOML1","title":"TOML1.tryparse","text":"tryparse(x::Union{AbstractString, IO})\ntryparse(p::Parser, x::Union{AbstractString, IO})\n\nParse the string or stream x, and return the resulting table (dictionary). Return a ParserError upon failure.\n\nSee also TOML1.parse.\n\n\n\n\n\n","category":"function"},{"location":"#TOML1.tryparsefile","page":"TOML1","title":"TOML1.tryparsefile","text":"tryparsefile(f::AbstractString)\ntryparsefile(p::Parser, f::AbstractString)\n\nParse file f and return the resulting table (dictionary). Return a ParserError upon failure.\n\nSee also TOML1.parsefile.\n\n\n\n\n\n","category":"function"},{"location":"#TOML1.print","page":"TOML1","title":"TOML1.print","text":"print([to_toml::Function], io::IO [=stdout], data::AbstractDict; sorted=false, by=identity, inline_tables::IdSet{<:AbstractDict})\n\nWrite data as TOML syntax to the stream io. If the keyword argument sorted is set to true, sort tables according to the function given by the keyword argument by. If the keyword argument inline_tables is given, it should be a set of tables that should be printed \"inline\".\n\nThe following data types are supported: AbstractDict, AbstractVector, AbstractString, Integer, AbstractFloat, Bool, Dates.DateTime, Dates.Time, Dates.Date. Note that the integers and floats need to be convertible to Float64 and Int64 respectively. For other data types, pass the function to_toml that takes the data types and returns a value of a supported type.\n\n\n\n\n\n","category":"function"},{"location":"#TOML1.Parser","page":"TOML1","title":"TOML1.Parser","text":"Parser()\n\nConstructor for a TOML Parser.  Note that in most cases one does not need to explicitly create a Parser but instead one directly use use TOML1.parsefile or TOML1.parse.  Using an explicit parser will however reuse some internal data structures which can be beneficial for performance if a larger number of small files are parsed.\n\n\n\n\n\n","category":"type"},{"location":"#TOML1.ParserError","page":"TOML1","title":"TOML1.ParserError","text":"ParserError\n\nType that is returned from tryparse and tryparsefile when parsing fails. It contains (among others) the following fields:\n\npos, the position in the string when the error happened\ntable, the result that so far was successfully parsed\ntype, an error type, different for different types of errors\n\n\n\n\n\n","category":"type"}]
}
